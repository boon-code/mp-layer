#!/usr/bin/env python
""" mpadd.py --

 UI generated by GUI Builder Build 146 on 2012-01-08 18:10:33 from:
    /home/nimmer/code/mp-layer/gui-layout/mpadd.ui
 This file is auto-generated.  Only the code within
    '# BEGIN USER CODE (global|class)'
    '# END USER CODE (global|class)'
 and code inside the callback subroutines will be round-tripped.
 The 'main' function is reserved.
"""

from Tkinter import *
from mpadd_ui import Mpadd

# BEGIN USER CODE global

# END USER CODE global

class CustomMpadd(Mpadd):
    pass

    # BEGIN CALLBACK CODE
    # ONLY EDIT CODE INSIDE THE def FUNCTIONS.

    # _butAdd_command --
    #
    # Callback to handle _butAdd widget option -command
    def _butAdd_command(self, *args):
        pass

    # _butCancel_command --
    #
    # Callback to handle _butCancel widget option -command
    def _butCancel_command(self, *args):
        pass

    # _chkSmart_command --
    #
    # Callback to handle _chkSmart widget option -command
    def _chkSmart_command(self, *args):
        pass

    # _lstNames_xscrollcommand --
    #
    # Callback to handle _lstNames widget option -xscrollcommand
    def _lstNames_xscrollcommand(self, *args):
        pass

    # _lstNames_yscrollcommand --
    #
    # Callback to handle _lstNames widget option -yscrollcommand
    def _lstNames_yscrollcommand(self, *args):
        pass

    # _sclNames_command --
    #
    # Callback to handle _sclNames widget option -command
    def _sclNames_command(self, *args):
        pass

    # _spnEpisode_command --
    #
    # Callback to handle _spnEpisode widget option -command
    def _spnEpisode_command(self, *args):
        pass

    # _spnEpisode_invalidcommand --
    #
    # Callback to handle _spnEpisode widget option -invalidcommand
    def _spnEpisode_invalidcommand(self, *args):
        pass

    # _spnEpisode_validatecommand --
    #
    # Callback to handle _spnEpisode widget option -validatecommand
    def _spnEpisode_validatecommand(self, *args):
        pass

    # _spnEpisode_xscrollcommand --
    #
    # Callback to handle _spnEpisode widget option -xscrollcommand
    def _spnEpisode_xscrollcommand(self, *args):
        pass

    # _spnSeason_command --
    #
    # Callback to handle _spnSeason widget option -command
    def _spnSeason_command(self, *args):
        pass

    # _spnSeason_invalidcommand --
    #
    # Callback to handle _spnSeason widget option -invalidcommand
    def _spnSeason_invalidcommand(self, *args):
        pass

    # _spnSeason_validatecommand --
    #
    # Callback to handle _spnSeason widget option -validatecommand
    def _spnSeason_validatecommand(self, *args):
        pass

    # _spnSeason_xscrollcommand --
    #
    # Callback to handle _spnSeason widget option -xscrollcommand
    def _spnSeason_xscrollcommand(self, *args):
        pass

    # _txtName_xscrollcommand --
    #
    # Callback to handle _txtName widget option -xscrollcommand
    def _txtName_xscrollcommand(self, *args):
        pass

    # _txtName_yscrollcommand --
    #
    # Callback to handle _txtName widget option -yscrollcommand
    def _txtName_yscrollcommand(self, *args):
        pass

    # _txtSource_xscrollcommand --
    #
    # Callback to handle _txtSource widget option -xscrollcommand
    def _txtSource_xscrollcommand(self, *args):
        pass

    # _txtSource_yscrollcommand --
    #
    # Callback to handle _txtSource widget option -yscrollcommand
    def _txtSource_yscrollcommand(self, *args):
        pass

    # _butDownload_command --
    #
    # Legacy command found in callback code. Add user comments inside body.
    def _butDownload_command(self, *args):
        pass

    # _lstExtension_xscrollcommand --
    #
    # Legacy command found in callback code. Add user comments inside body.
    def _lstExtension_xscrollcommand(self, *args):
        pass

    # _lstExtension_yscrollcommand --
    #
    # Legacy command found in callback code. Add user comments inside body.
    def _lstExtension_yscrollcommand(self, *args):
        pass

    # _sclExtension_command --
    #
    # Legacy command found in callback code. Add user comments inside body.
    def _sclExtension_command(self, *args):
        pass

    # END CALLBACK CODE

    # BEGIN USER CODE class

    # END USER CODE class

def main():
    # Standalone Code Initialization
    # DO NOT EDIT
    try: userinit()
    except NameError: pass
    root = Tk()
    demo = CustomMpadd(root)
    root.title('mpadd')
    try: run()
    except NameError: pass
    root.protocol('WM_DELETE_WINDOW', root.quit)
    root.mainloop()

if __name__ == '__main__': main()
